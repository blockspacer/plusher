declare_args() {
  llvm_config_path = "llvm-config"
}

set_defaults("executable") {
  cflags = [
    "-g",
    "-std=c++11",
    "-fno-exceptions",
    "-fno-rtti",
  ]
}

config("llvm") {
  cflags = exec_script("//build/llvm-config.py",
                       [llvm_config_path, "--cxxflags"], "list lines")
  ldflags = exec_script("//build/llvm-config.py",
                        [llvm_config_path, "--ldflags"], "list lines")
}

config("gtest_config") {
  include_dirs = ["third-party/gtest/googletest/include"]
  lib_dirs = ["third-party/gtest/googlemock/gtest"]
  libs = ["gtest"]
}
group("gtest") {
  public_configs = [":gtest_config"]
}

static_library("libplusher") {
  sources = [
    "src/action.cc",
    "src/action.h",
    "src/ast_consumer.cc",
    "src/ast_consumer.h",
    "src/ast_visitor.cc",
    "src/ast_visitor.h",
    "src/lib.cc",
    "src/lib.h",
    "src/recipe.cc",
    "src/recipe.h",
  ]
  public_configs = [ ":llvm" ]
  libs = [
    "LLVM",
    "clang",
    "clangARCMigrate",
    "clangAST",
    "clangASTMatchers",
    "clangAnalysis",
    "clangApplyReplacements",
    "clangBasic",
    "clangCodeGen",
    "clangDriver",
    "clangDynamicASTMatchers",
    "clangEdit",
    "clangFormat",
    "clangFrontend",
    "clangFrontendTool",
    "clangIncludeFixer",
    "clangIndex",
    "clangLex",
    "clangParse",
    "clangQuery",
    "clangRename",
    "clangRewrite",
    "clangRewriteFrontend",
    "clangSema",
    "clangSerialization",
    "clangStaticAnalyzerCheckers",
    "clangStaticAnalyzerCore",
    "clangStaticAnalyzerFrontend",
    "clangTidy",
    "clangTidyBoostModule",
    "clangTidyCERTModule",
    "clangTidyCppCoreGuidelinesModule",
    "clangTidyGoogleModule",
    "clangTidyLLVMModule",
    "clangTidyMiscModule",
    "clangTidyModernizeModule",
    "clangTidyPerformanceModule",
    "clangTidyPlugin",
    "clangTidyReadabilityModule",
    "clangTidyUtils",
    "clangTooling",
    "clangToolingCore",
    "findAllSymbols",
    "lldCOFF",
    "lldConfig",
    "lldCore",
    "lldDriver",
    "lldELF",
    "lldMachO",
    "lldReaderWriter",
    "lldYAML",
  ]
}

executable("plusher") {
  sources = [
    "src/plusher.cc",
  ]
  deps = [":libplusher"]
}

executable("tests") {
  sources = ["src/tests.cc"]
  deps = [":libplusher", ":gtest"]
  configs = [":llvm"]
}
